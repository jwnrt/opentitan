{
    name: "cdi_owner",

    variables: {
        // Owner public key: this is an EC point on
        // the prime256v1 curve so it has two components
        // (x and y) which are 32-bytes integers.
        owner_pub_key_ec_x: {
            type: "integer",
            size: 32,
            endianness: "big",
            limb_size: 4,
        },
        owner_pub_key_ec_y: {
            type: "integer",
            size: 32,
            endianness: "big",
            limb_size: 4,
        },
        // Creator public key ID: this is a 20-byte hash
        // derived from the creator public key.
        owner_pub_key_id: {
            type: "byte-array",
            size: 20,
        },
        // This is the identifier of the public key used to
        // sign this certificate. For CDI_0 this will be
        // the creator public key ID (held in the UDS), for
        // CDI_1, this will be the owner intermediate key (
        // held in CDI_0).
        signing_pub_key_id: {
            type: "byte-array",
            size: 20,
        },
        // Hash of the ROM_EXT.
        rom_ext_hash: {
            type: "byte-array",
            size: 20,
        },
        // Hash of the ownership manifest.
        ownership_manifest_hash: {
            type: "byte-array",
            size: 20,
        },
        // ROM_EXT security version, used to prevent rollback.
        rom_ext_security_version: {
            type: "integer",
            size: 4,
        }
        // Layer (0 for CDI_0 and 1 for CDI_1).
        layer: {
            type: "integer",
            size: 4,
        }
        // Certificate signature: the result of signing with ECDSA
        // are two integers named "r" and "s"
        cert_signature_r: {
            type: "integer",
            size: 32,
            endianness: "big",
            limb_size: 4,
        },
        cert_signature_s: {
            type: "integer",
            size: 32,
            endianness: "big",
            limb_size: 4,
        },
    },

    certificate: {
        serial_number: { var: "owner_pub_key_id", convert: "little-endian" },
        issuer: {
            serial_number: { var: "signing_pub_key_id", convert: "lowercase-hex" },
        },
        subject: {
            serial_number: { var: "owner_pub_key_id", convert: "lowercase-hex" },
        },
        subject_public_key_info: {
            algorithm: "ec-public-key",
            curve: "prime256v1",
            public_key: {
                x: { var: "owner_pub_key_ec_x" },
                y: { var: "owner_pub_key_ec_y" },
            },
        },
        authority_key_identifier: { var: "signing_pub_key_id" },
        subject_key_identifier: { var: "owner_pub_key_id" },
        vendor: "OpenTitan",
        model: "ROM_EXT",
        svn: { var: "rom_ext_security_version" },
        layer: { var: "layer" },
        fw_ids: [
            { hash_algorithm: "sha256", digest: { var: "rom_ext_hash" } },
            { hash_algorithm: "sha256", digest: { var: "ownership_manifest_hash" } },
        ],
        flags: {
            not_configured: true,
            not_secure: false,
            recovery: true,
            debug: false,
        }
        signature: {
            algorithm: "ecdsa-with-sha256",
            // The value field is optional: if not present, the signature will be cleared.
            // Otherwise, we can reference the various fields of the signature.
            value: {
                r: { var: "cert_signature_r" },
                s: { var: "cert_signature_s" }
            }
        }
    }
}
